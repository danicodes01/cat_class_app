// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}
model User {
  id            String       @id @default(uuid())
  username      String       @unique
  email         String?      @unique
  passwordHash  String
  userAuthToken String @unique
  createdAt     DateTime     @default(now()) @map(name: "created_at")
  updatedAt     DateTime     @updatedAt @map(name: "updated_at")
  subscriptions Subscription[]
  progress      Progress[]
  purchases     Purchase[]
  role          Roles        @relation(fields: [roleId], references: [id])
  roleId        Int
  @@map(name: "users")
}

model Roles {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  User          User[]
}

model LessonPlan {
  id            String        @default(cuid()) @id
  name          String
  description   String
  planType      String
  priceId       String?       @unique
  endpoint      String        @unique
  image         String
  price         Float
  createdAt     DateTime      @default(now()) @map(name: "created_at")
  updatedAt     DateTime      @updatedAt @map(name: "updated_at")
  features      LessonPlanFeature[]
  purchases     Purchase[]
  subscriptions Subscription[]
  progress      Progress[]
  @@map(name: "lesson_plans")
}

model Feature {
  id            String       @default(cuid()) @id
  name          String
  planTypes     String[]
  lessonPlans   LessonPlanFeature[]
  createdAt     DateTime     @default(now()) @map(name: "created_at")
  updatedAt     DateTime     @updatedAt @map(name: "updated_at")
  @@map(name: "features")
}

model LessonPlanFeature {
  lessonPlan    LessonPlan @relation(fields: [lessonPlanId], references: [id])
  lessonPlanId  String
  feature       Feature    @relation(fields: [featureId], references: [id])
  featureId     String
  @@id([lessonPlanId, featureId])
}

model Subscription {
  id            String       @default(cuid()) @id
  userId        String
  lessonPlanId  String
  startDate     DateTime
  endDate       DateTime?
  createdAt     DateTime     @default(now()) @map(name: "created_at")
  updatedAt     DateTime     @updatedAt @map(name: "updated_at")
  user          User         @relation(fields: [userId], references: [id])
  lessonPlan    LessonPlan   @relation(fields: [lessonPlanId], references: [id])
  @@map(name: "subscriptions")
}

model Progress {
  id                String       @default(cuid()) @id
  userId            String
  lessonPlanId      String
  completed         Boolean      @default(false)
  progressPercentage Int         @default(0)
  createdAt         DateTime     @default(now()) @map(name: "created_at")
  updatedAt         DateTime     @updatedAt @map(name: "updated_at")
  user              User         @relation(fields: [userId], references: [id])
  lessonPlan        LessonPlan   @relation(fields: [lessonPlanId], references: [id])
  @@map(name: "progress")
}

model Purchase {
  id            String       @default(cuid()) @id
  userId        String
  lessonPlanId  String
  purchaseDate  DateTime     @default(now())
  createdAt     DateTime     @default(now()) @map(name: "created_at")
  updatedAt     DateTime     @updatedAt @map(name: "updated_at")
  user          User         @relation(fields: [userId], references: [id])
  lessonPlan    LessonPlan   @relation(fields: [lessonPlanId], references: [id])
  @@map(name: "purchases")
}